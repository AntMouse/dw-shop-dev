1. import 정리하는 법

// 1. React 기본 라이브러리 (React 관련 라이브러리)
import React from 'react';

// 2. 외부 라이브러리
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';

// 3. 전역 스타일 파일 (필요한 경우)
import '../../styles/global.css';

// 4. 사용자가 만든 내부 컴포넌트 & 유틸리티
import AdminSidebar from '../../components/admin/AdminSidebar';
import useAuth from '../../hooks/useAuth';

// 5. CSS 또는 스타일 파일
import '../../styles/admin/AdminMain.css';


2. 실무에서 리액트 폴더 구조 예시

📦 src
 ┣ 📂 components            # 공통 UI 컴포넌트 & 도메인별 컴포넌트
 ┃ ┣ 📂 common             # 재사용 가능한 공통 컴포넌트 (Button, Modal 등)
 ┃ ┃ ┣ 📜 Button.js
 ┃ ┃ ┣ 📜 Modal.js
 ┃ ┃ ┣ 📜 LoadingSpinner.js
 ┃ ┃ ┣ 📜 Input.js
 ┃ ┃ ┣ 📂 styles/ (공통 스타일)
 ┃ ┣ 📂 admin              # 관리자 페이지 관련 컴포넌트
 ┃ ┃ ┣ 📂 member           # 관리자 - 회원 관리 기능
 ┃ ┃ ┃ ┣ 📜 AdminMemberForm.js
 ┃ ┃ ┃ ┣ 📜 AdminMemberList.js
 ┃ ┃ ┃ ┣ 📜 AdminMemberEditPage.js
 ┃ ┃ ┃ ┣ 📂 styles/
 ┃ ┃ ┣ 📂 product          # 관리자 - 상품 관리 기능
 ┃ ┃ ┃ ┣ 📜 AdminProductList.js
 ┃ ┃ ┃ ┣ 📜 AdminProductEditPage.js
 ┃ ┃ ┃ ┣ 📜 AdminProductForm.js
 ┃ ┃ ┃ ┣ 📂 styles/
 ┃ ┃ ┣ 📂 order            # 관리자 - 주문 관리 기능
 ┃ ┃ ┃ ┣ 📜 AdminOrderList.js
 ┃ ┃ ┃ ┣ 📜 AdminOrderDetail.js
 ┃ ┃ ┃ ┣ 📂 styles/
 ┃ ┃ ┣ 📜 AdminDashboard.js # 관리자 대시보드
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 member             # 일반 회원 관련 컴포넌트
 ┃ ┃ ┣ 📜 MemberProfile.js
 ┃ ┃ ┣ 📜 MemberEditPage.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 product            # 일반 사용자 상품 관련 컴포넌트
 ┃ ┃ ┣ 📜 ProductList.js
 ┃ ┃ ┣ 📜 ProductDetail.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 order              # 일반 사용자 주문 관련 컴포넌트
 ┃ ┃ ┣ 📜 OrderList.js
 ┃ ┃ ┣ 📜 OrderDetail.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 cart               # 장바구니 관련 컴포넌트
 ┃ ┃ ┣ 📜 Cart.js
 ┃ ┃ ┣ 📜 CartItem.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 auth               # 로그인, 회원가입 관련 컴포넌트
 ┃ ┃ ┣ 📜 Login.js
 ┃ ┃ ┣ 📜 Signup.js
 ┃ ┃ ┣ 📜 ForgotPassword.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 layout             # 레이아웃 관련 컴포넌트 (Header, Footer)
 ┃ ┃ ┣ 📜 Header.js
 ┃ ┃ ┣ 📜 Footer.js
 ┃ ┃ ┣ 📂 styles/
 ┃ ┣ 📂 navigation         # 네비게이션 관련 컴포넌트 (메뉴바 등)
 ┃ ┃ ┣ 📜 Sidebar.js
 ┃ ┃ ┣ 📂 styles/
 ┃
 ┣ 📂 pages                # 페이지 단위 컴포넌트 (라우팅 담당)
 ┃ ┣ 📜 AdminPage.js       # 관리자 메인 페이지
 ┃ ┣ 📜 AdminMemberPage.js # 관리자 회원 관리 페이지
 ┃ ┣ 📜 AdminProductPage.js # 관리자 상품 관리 페이지
 ┃ ┣ 📜 AdminOrderPage.js  # 관리자 주문 관리 페이지
 ┃ ┣ 📜 MemberPage.js      # 일반 회원 메인 페이지
 ┃ ┣ 📜 ProductPage.js     # 상품 페이지
 ┃ ┣ 📜 OrderPage.js       # 주문 페이지
 ┃ ┣ 📜 CartPage.js        # 장바구니 페이지
 ┃ ┣ 📜 AuthPage.js        # 로그인, 회원가입 페이지
 ┃
 ┣ 📂 hooks                # 커스텀 훅 (비즈니스 로직)
 ┃ ┣ 📜 useAuth.js         # 로그인 상태 관리
 ┃ ┣ 📜 useFetchMember.js  # 회원 정보 불러오기
 ┃ ┣ 📜 useEditMemberType.js # 회원 타입 수정
 ┃ ┣ 📜 useCart.js         # 장바구니 관리
 ┃ ┣ 📜 useOrder.js        # 주문 데이터 관리
 ┃ ┣ 📜 useProduct.js      # 상품 데이터 관리
 ┃
 ┣ 📂 services
 ┃ ┣ 📂 admin
 ┃ ┃ ┣ 📜 adminMemberService.js
 ┃ ┃ ┣ 📜 adminProductService.js
 ┃ ┃ ┣ 📜 adminOrderService.js
 ┃ ┣ 📂 member
 ┃ ┃ ┣ 📜 memberService.js
 ┃ ┃ ┣ 📜 addressService.js
 ┃ ┣ 📂 product
 ┃ ┃ ┣ 📜 productService.js
 ┃ ┣ 📂 order
 ┃ ┃ ┣ 📜 orderService.js
 ┃ ┣ 📂 cart
 ┃ ┃ ┣ 📜 cartService.js
 ┃ ┣ 📜 authService.js
 ┃
 ┣ 📂 utils                # 유틸리티 함수
 ┃ ┣ 📜 formatDate.js      # 날짜 변환 함수
 ┃ ┣ 📜 maskUtils.js       # 전화번호 마스킹 등
 ┃ ┣ 📜 adminNavigation.js # 관리자 네비게이션
 ┃
 ┣ 📂 styles               # 전역 스타일
 ┃ ┣ 📜 global.css
 ┃ ┣ 📜 reset.css
 ┃ ┣ 📜 theme.css
 ┃
 ┣ 📜 App.js               # 애플리케이션 진입점
 ┣ 📜 index.js             # React DOM 렌더링
 ┣ 📜 routes.js            # 라우트 관리
 ┣ 📜 config.js            # 환경 설정 (API URL 등)


3. 소스 파일(.js 또는 .css) 가장 위에 주석(//) 으로 폴더 경로와
소스 파일 이름을 적어 놓자.

예를 들면 Components/admin/member/MemberEditPage.js 이런 식으로 경로까지
전부 적는다.

4. css에서 

.member-edit-page-container h1 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

이런 식으로 이름을 지정할 때는 경로까지 다 사용해서 이름을 작성하자.
내가 3번에서 소스 파일 위에 주석으로 파일 경로와 이름까지 적는 걸
그대로 여기에 적용하면 된다.

components-admin-member-member-edit-page-container h1 이런 식으로.